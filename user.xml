<templateSet group="user">
  <template name="if not connected" value="from vzmi.mlx.common.runtime_information.OperatingSystem.ConnnectedToDistributedFilesystem.is_class import is_OperatingSystem_ConnnectedToDistributedFilesystem&#10;if not is_OperatingSystem_ConnnectedToDistributedFilesystem():&#10;    return" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="optional  leave blank to" value=": Optional[$str$], left blank to $s$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="s" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="str" expression="" defaultValue="&quot;str&quot;" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="Django" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="PUPPET_FILE" value="false" />
      <option name="Python" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="if string equal" value="if [[ ${$s1$} = $s2$ ]]; then&#10;    echo &gt; /dev/null&#10;fi" description="" toReformat="true" toShortenFQNames="true">
    <variable name="s1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="s2" expression="" defaultValue="&quot;true&quot;" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="stop" value="return" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="if is str import" value="if isinstance($ModelClass$, str):&#10;        from pyramids.common.runtime_information.SourceCodeInterpreter._components.SourceCodePath.ImportedLibraries._components.ImportableLibrary._components.ImportableLibraryAttribute.io_ops.export_op import ImportableLibraryAttribute_to_Object&#10;        $ModelClass$ = ImportableLibraryAttribute_to_Object($ModelClass$)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="ModelClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ImportableLibraryAttribute_to_Object" value="if isinstance($obj$, str):&#10;        from pyramids.common.runtime_information.SourceCodeInterpreter._components.SourceCodePaths.ImportedLibraries._components.ImportableLibrary._components.ImportableLibraryAttribute.io_ops.export_op import ImportableLibraryAttribute_to_Object&#10;        $obj$ = ImportableLibraryAttribute_to_Object($obj$)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="obj" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="get basename of file" value="LocalPath_get_BasenameWithoutExtension(__file__)" description="" toReformat="true" toShortenFQNames="true">
  </template>
  <template name="self = AttrDict" value="from vzmi.pyramids.common.Variable.LocalGenericContainer.HashBasedLocalGenericContainer.Dictionary.Attrdict import AttrDict&#10;self = AttrDict()" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
</templateSet>
  <template name="try excetp importerror" value="try:&#10;        $stmt$&#10;except ImportError as e:&#10;        from vzmi.pyramids.software_engineering.viewing.Logger.log_op import Logger_log&#10;        Logger_log(e)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="stmt" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>
