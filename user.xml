<templateSet group="user">
  <template name="uncomment to speed up" value="uncomment to speed up" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="&lt;abbreviation&gt;" value="eval(f&quot;exec('{stmt}')&quot;)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="declare variable type" value="assert isinstance($name$, $type$)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="breakpoint" value="from vzmi.mlx.software_engineering.modifying.Breakpoint.create import create_Breakpoint&#10;create_Breakpoint()" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="ablate" value="for $variable$ in $range_list$; do&#10;    ipo do_disable_PDB=1 pd $(LocalDirectory_get_ChildrenFilesList_in_shell $(realpath $(dirname &quot;$0&quot;)) .py | head -n 1  ) --n_estimators ${$variable$} --${ablation_subdirectory__parameter_NAME} $ablation_subdirectory$&#10;done" description="" toReformat="true" toShortenFQNames="true">
    <variable name="range_list" expression="" defaultValue="&quot;3 4 5&quot;" alwaysStopAt="true" />
    <variable name="ablation_subdirectory" expression="date(&quot;Y_MM_d_E_H_m&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="variable" expression="" defaultValue="&quot;v&quot;" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="def injectable" value="class $name$_Class:&#10;    def __init__(self, $injectable_parameter$=None, ):&#10;        self.$injectable_parameter$ = $injectable_parameter$&#10;&#10;    def __call__(self, $injectable_parameter$=None, *args, **kwargs):&#10;        if $injectable_parameter$ is None:&#10;            $injectable_parameter$ = self.$injectable_parameter$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="injectable_parameter" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="bin env python" value="#!/usr/bin/env python" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="nonlocal" value="nonlocal " toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="Django" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="PUPPET_FILE" value="false" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="function_creator stub" value="_Function_creator&#10;def f():&#10;    $body$&#10;return f" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>